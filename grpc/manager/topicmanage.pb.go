// Code generated by protoc-gen-go. DO NOT EDIT.
// source: topicmanage.proto

package topicproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetConnectNumRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConnectNumRequest) Reset()         { *m = GetConnectNumRequest{} }
func (m *GetConnectNumRequest) String() string { return proto.CompactTextString(m) }
func (*GetConnectNumRequest) ProtoMessage()    {}
func (*GetConnectNumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{0}
}
func (m *GetConnectNumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConnectNumRequest.Unmarshal(m, b)
}
func (m *GetConnectNumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConnectNumRequest.Marshal(b, m, deterministic)
}
func (dst *GetConnectNumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConnectNumRequest.Merge(dst, src)
}
func (m *GetConnectNumRequest) XXX_Size() int {
	return xxx_messageInfo_GetConnectNumRequest.Size(m)
}
func (m *GetConnectNumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConnectNumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConnectNumRequest proto.InternalMessageInfo

func (m *GetConnectNumRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type GetConnectNumResponse struct {
	Number               int64    `protobuf:"varint,1,opt,name=Number,proto3" json:"Number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConnectNumResponse) Reset()         { *m = GetConnectNumResponse{} }
func (m *GetConnectNumResponse) String() string { return proto.CompactTextString(m) }
func (*GetConnectNumResponse) ProtoMessage()    {}
func (*GetConnectNumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{1}
}
func (m *GetConnectNumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConnectNumResponse.Unmarshal(m, b)
}
func (m *GetConnectNumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConnectNumResponse.Marshal(b, m, deterministic)
}
func (dst *GetConnectNumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConnectNumResponse.Merge(dst, src)
}
func (m *GetConnectNumResponse) XXX_Size() int {
	return xxx_messageInfo_GetConnectNumResponse.Size(m)
}
func (m *GetConnectNumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConnectNumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConnectNumResponse proto.InternalMessageInfo

func (m *GetConnectNumResponse) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SubscribeTopicRequest struct {
	Topic                []string `protobuf:"bytes,1,rep,name=Topic,proto3" json:"Topic,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeTopicRequest) Reset()         { *m = SubscribeTopicRequest{} }
func (m *SubscribeTopicRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeTopicRequest) ProtoMessage()    {}
func (*SubscribeTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{2}
}
func (m *SubscribeTopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeTopicRequest.Unmarshal(m, b)
}
func (m *SubscribeTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeTopicRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeTopicRequest.Merge(dst, src)
}
func (m *SubscribeTopicRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeTopicRequest.Size(m)
}
func (m *SubscribeTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeTopicRequest proto.InternalMessageInfo

func (m *SubscribeTopicRequest) GetTopic() []string {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *SubscribeTopicRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type SubscribeTopicResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeTopicResponse) Reset()         { *m = SubscribeTopicResponse{} }
func (m *SubscribeTopicResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeTopicResponse) ProtoMessage()    {}
func (*SubscribeTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{3}
}
func (m *SubscribeTopicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeTopicResponse.Unmarshal(m, b)
}
func (m *SubscribeTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeTopicResponse.Marshal(b, m, deterministic)
}
func (dst *SubscribeTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeTopicResponse.Merge(dst, src)
}
func (m *SubscribeTopicResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeTopicResponse.Size(m)
}
func (m *SubscribeTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeTopicResponse proto.InternalMessageInfo

type UnSubscribeTopicRequest struct {
	Topic                []string `protobuf:"bytes,1,rep,name=Topic,proto3" json:"Topic,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnSubscribeTopicRequest) Reset()         { *m = UnSubscribeTopicRequest{} }
func (m *UnSubscribeTopicRequest) String() string { return proto.CompactTextString(m) }
func (*UnSubscribeTopicRequest) ProtoMessage()    {}
func (*UnSubscribeTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{4}
}
func (m *UnSubscribeTopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnSubscribeTopicRequest.Unmarshal(m, b)
}
func (m *UnSubscribeTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnSubscribeTopicRequest.Marshal(b, m, deterministic)
}
func (dst *UnSubscribeTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnSubscribeTopicRequest.Merge(dst, src)
}
func (m *UnSubscribeTopicRequest) XXX_Size() int {
	return xxx_messageInfo_UnSubscribeTopicRequest.Size(m)
}
func (m *UnSubscribeTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnSubscribeTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnSubscribeTopicRequest proto.InternalMessageInfo

func (m *UnSubscribeTopicRequest) GetTopic() []string {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *UnSubscribeTopicRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type UnSubscribeTopicResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnSubscribeTopicResponse) Reset()         { *m = UnSubscribeTopicResponse{} }
func (m *UnSubscribeTopicResponse) String() string { return proto.CompactTextString(m) }
func (*UnSubscribeTopicResponse) ProtoMessage()    {}
func (*UnSubscribeTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{5}
}
func (m *UnSubscribeTopicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnSubscribeTopicResponse.Unmarshal(m, b)
}
func (m *UnSubscribeTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnSubscribeTopicResponse.Marshal(b, m, deterministic)
}
func (dst *UnSubscribeTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnSubscribeTopicResponse.Merge(dst, src)
}
func (m *UnSubscribeTopicResponse) XXX_Size() int {
	return xxx_messageInfo_UnSubscribeTopicResponse.Size(m)
}
func (m *UnSubscribeTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnSubscribeTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnSubscribeTopicResponse proto.InternalMessageInfo

type PublishRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	MessageId            string   `protobuf:"bytes,3,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	Source               string   `protobuf:"bytes,4,opt,name=Source,proto3" json:"Source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{6}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (dst *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(dst, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PublishRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *PublishRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type PublishResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{7}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (dst *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(dst, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type CheckTopicExistRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTopicExistRequest) Reset()         { *m = CheckTopicExistRequest{} }
func (m *CheckTopicExistRequest) String() string { return proto.CompactTextString(m) }
func (*CheckTopicExistRequest) ProtoMessage()    {}
func (*CheckTopicExistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{8}
}
func (m *CheckTopicExistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckTopicExistRequest.Unmarshal(m, b)
}
func (m *CheckTopicExistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckTopicExistRequest.Marshal(b, m, deterministic)
}
func (dst *CheckTopicExistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTopicExistRequest.Merge(dst, src)
}
func (m *CheckTopicExistRequest) XXX_Size() int {
	return xxx_messageInfo_CheckTopicExistRequest.Size(m)
}
func (m *CheckTopicExistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTopicExistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTopicExistRequest proto.InternalMessageInfo

func (m *CheckTopicExistRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type CheckTopicExistResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTopicExistResponse) Reset()         { *m = CheckTopicExistResponse{} }
func (m *CheckTopicExistResponse) String() string { return proto.CompactTextString(m) }
func (*CheckTopicExistResponse) ProtoMessage()    {}
func (*CheckTopicExistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_topicmanage_fc3522fc6bd4a59f, []int{9}
}
func (m *CheckTopicExistResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckTopicExistResponse.Unmarshal(m, b)
}
func (m *CheckTopicExistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckTopicExistResponse.Marshal(b, m, deterministic)
}
func (dst *CheckTopicExistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTopicExistResponse.Merge(dst, src)
}
func (m *CheckTopicExistResponse) XXX_Size() int {
	return xxx_messageInfo_CheckTopicExistResponse.Size(m)
}
func (m *CheckTopicExistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTopicExistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTopicExistResponse proto.InternalMessageInfo

func (m *CheckTopicExistResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*GetConnectNumRequest)(nil), "topicproto.GetConnectNumRequest")
	proto.RegisterType((*GetConnectNumResponse)(nil), "topicproto.GetConnectNumResponse")
	proto.RegisterType((*SubscribeTopicRequest)(nil), "topicproto.SubscribeTopicRequest")
	proto.RegisterType((*SubscribeTopicResponse)(nil), "topicproto.SubscribeTopicResponse")
	proto.RegisterType((*UnSubscribeTopicRequest)(nil), "topicproto.UnSubscribeTopicRequest")
	proto.RegisterType((*UnSubscribeTopicResponse)(nil), "topicproto.UnSubscribeTopicResponse")
	proto.RegisterType((*PublishRequest)(nil), "topicproto.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "topicproto.PublishResponse")
	proto.RegisterType((*CheckTopicExistRequest)(nil), "topicproto.CheckTopicExistRequest")
	proto.RegisterType((*CheckTopicExistResponse)(nil), "topicproto.CheckTopicExistResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopicServiceClient is the client API for TopicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopicServiceClient interface {
	GetConnectNum(ctx context.Context, in *GetConnectNumRequest, opts ...grpc.CallOption) (*GetConnectNumResponse, error)
	SubscribeTopic(ctx context.Context, in *SubscribeTopicRequest, opts ...grpc.CallOption) (*SubscribeTopicResponse, error)
	UnSubscribeTopic(ctx context.Context, in *UnSubscribeTopicRequest, opts ...grpc.CallOption) (*UnSubscribeTopicResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	CheckTopicExist(ctx context.Context, in *CheckTopicExistRequest, opts ...grpc.CallOption) (*CheckTopicExistResponse, error)
}

type topicServiceClient struct {
	cc *grpc.ClientConn
}

func NewTopicServiceClient(cc *grpc.ClientConn) TopicServiceClient {
	return &topicServiceClient{cc}
}

func (c *topicServiceClient) GetConnectNum(ctx context.Context, in *GetConnectNumRequest, opts ...grpc.CallOption) (*GetConnectNumResponse, error) {
	out := new(GetConnectNumResponse)
	err := c.cc.Invoke(ctx, "/topicproto.TopicService/GetConnectNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) SubscribeTopic(ctx context.Context, in *SubscribeTopicRequest, opts ...grpc.CallOption) (*SubscribeTopicResponse, error) {
	out := new(SubscribeTopicResponse)
	err := c.cc.Invoke(ctx, "/topicproto.TopicService/SubscribeTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) UnSubscribeTopic(ctx context.Context, in *UnSubscribeTopicRequest, opts ...grpc.CallOption) (*UnSubscribeTopicResponse, error) {
	out := new(UnSubscribeTopicResponse)
	err := c.cc.Invoke(ctx, "/topicproto.TopicService/UnSubscribeTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/topicproto.TopicService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) CheckTopicExist(ctx context.Context, in *CheckTopicExistRequest, opts ...grpc.CallOption) (*CheckTopicExistResponse, error) {
	out := new(CheckTopicExistResponse)
	err := c.cc.Invoke(ctx, "/topicproto.TopicService/CheckTopicExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicServiceServer is the server API for TopicService service.
type TopicServiceServer interface {
	GetConnectNum(context.Context, *GetConnectNumRequest) (*GetConnectNumResponse, error)
	SubscribeTopic(context.Context, *SubscribeTopicRequest) (*SubscribeTopicResponse, error)
	UnSubscribeTopic(context.Context, *UnSubscribeTopicRequest) (*UnSubscribeTopicResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	CheckTopicExist(context.Context, *CheckTopicExistRequest) (*CheckTopicExistResponse, error)
}

func RegisterTopicServiceServer(s *grpc.Server, srv TopicServiceServer) {
	s.RegisterService(&_TopicService_serviceDesc, srv)
}

func _TopicService_GetConnectNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).GetConnectNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topicproto.TopicService/GetConnectNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).GetConnectNum(ctx, req.(*GetConnectNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_SubscribeTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).SubscribeTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topicproto.TopicService/SubscribeTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).SubscribeTopic(ctx, req.(*SubscribeTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_UnSubscribeTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).UnSubscribeTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topicproto.TopicService/UnSubscribeTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).UnSubscribeTopic(ctx, req.(*UnSubscribeTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topicproto.TopicService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_CheckTopicExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTopicExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).CheckTopicExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topicproto.TopicService/CheckTopicExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).CheckTopicExist(ctx, req.(*CheckTopicExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "topicproto.TopicService",
	HandlerType: (*TopicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectNum",
			Handler:    _TopicService_GetConnectNum_Handler,
		},
		{
			MethodName: "SubscribeTopic",
			Handler:    _TopicService_SubscribeTopic_Handler,
		},
		{
			MethodName: "UnSubscribeTopic",
			Handler:    _TopicService_UnSubscribeTopic_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _TopicService_Publish_Handler,
		},
		{
			MethodName: "CheckTopicExist",
			Handler:    _TopicService_CheckTopicExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topicmanage.proto",
}

func init() { proto.RegisterFile("topicmanage.proto", fileDescriptor_topicmanage_fc3522fc6bd4a59f) }

var fileDescriptor_topicmanage_fc3522fc6bd4a59f = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x5f, 0x5a, 0x5e, 0xde, 0x97, 0x09, 0x16, 0x9d, 0xf0, 0xa7, 0xa9, 0x1e, 0x60, 0xf1,
	0xa0, 0x89, 0xa9, 0x89, 0x9e, 0x8d, 0x07, 0x30, 0x86, 0x83, 0x60, 0x8a, 0x9a, 0x98, 0x98, 0x98,
	0xb6, 0x4e, 0xa0, 0x41, 0xda, 0xda, 0x6d, 0x8d, 0x9f, 0xd0, 0xcf, 0x65, 0x58, 0x6a, 0xa1, 0xa5,
	0xf6, 0xe2, 0x6d, 0x67, 0xf7, 0x99, 0xdf, 0x93, 0x9d, 0x67, 0x60, 0x2f, 0xf4, 0x7c, 0xc7, 0x5e,
	0x98, 0xae, 0x39, 0x25, 0xdd, 0x0f, 0xbc, 0xd0, 0x43, 0x10, 0x57, 0xe2, 0xcc, 0x4e, 0xa0, 0x71,
	0x4d, 0x61, 0xdf, 0x73, 0x5d, 0xb2, 0xc3, 0x51, 0xb4, 0x30, 0xe8, 0x2d, 0x22, 0x1e, 0x62, 0x03,
	0xfe, 0xde, 0x2d, 0x55, 0x6a, 0xa9, 0x53, 0x3a, 0xaa, 0x1a, 0xab, 0x82, 0x9d, 0x42, 0x33, 0xa3,
	0xe6, 0xbe, 0xe7, 0x72, 0xc2, 0x16, 0x54, 0x46, 0xd1, 0xc2, 0xa2, 0x40, 0xe8, 0x65, 0x23, 0xae,
	0xd8, 0x05, 0x34, 0x27, 0x91, 0xc5, 0xed, 0xc0, 0xb1, 0x48, 0x20, 0x72, 0xf8, 0x72, 0xc2, 0x47,
	0x05, 0xa4, 0xa1, 0xaf, 0x4a, 0xc2, 0x52, 0x1a, 0xfa, 0x4c, 0x85, 0x56, 0xb6, 0x7d, 0x65, 0xc8,
	0x2e, 0xa1, 0x7d, 0xef, 0xfe, 0x06, 0xad, 0x81, 0xba, 0x0d, 0x88, 0xe1, 0x3e, 0x28, 0xb7, 0x91,
	0xf5, 0xea, 0xf0, 0x59, 0xe1, 0x38, 0x10, 0xa1, 0x3c, 0x30, 0x43, 0x53, 0x50, 0x6b, 0x86, 0x38,
	0xe3, 0x01, 0x54, 0x6f, 0x88, 0x73, 0x73, 0x4a, 0xc3, 0x17, 0x55, 0x16, 0xea, 0xf5, 0xc5, 0x72,
	0x4e, 0x13, 0x2f, 0x0a, 0x6c, 0x52, 0xcb, 0xe2, 0x29, 0xae, 0x58, 0x17, 0xea, 0x89, 0x63, 0x3c,
	0x52, 0x05, 0xa4, 0xf1, 0x5c, 0xf8, 0xfd, 0x37, 0xa4, 0xf1, 0x9c, 0xe9, 0xd0, 0xea, 0xcf, 0xc8,
	0x9e, 0x0b, 0xeb, 0xab, 0x0f, 0x87, 0x87, 0xc5, 0x59, 0x1d, 0x43, 0x7b, 0x4b, 0x9f, 0x8f, 0x3e,
	0xfb, 0x94, 0xa1, 0x26, 0x64, 0x13, 0x0a, 0xde, 0x1d, 0x9b, 0xf0, 0x01, 0x76, 0x52, 0x39, 0x63,
	0x47, 0x5f, 0xef, 0x8c, 0x9e, 0xb7, 0x30, 0x5a, 0xb7, 0x40, 0x11, 0x8f, 0xf5, 0x0f, 0x3e, 0x82,
	0x92, 0x1e, 0x39, 0xa6, 0xda, 0x72, 0xf3, 0xd4, 0x58, 0x91, 0x24, 0x41, 0x3f, 0xc3, 0x6e, 0x36,
	0x4f, 0xec, 0x6d, 0x76, 0xfe, 0xb0, 0x2e, 0xda, 0x61, 0xb1, 0x28, 0x31, 0x18, 0xc0, 0xbf, 0x38,
	0x22, 0xd4, 0x36, 0x5b, 0xd2, 0x9b, 0xa2, 0xed, 0xe7, 0xbe, 0x25, 0x94, 0x27, 0xa8, 0x67, 0x52,
	0xc1, 0xd4, 0xff, 0xf2, 0x23, 0xd6, 0x7a, 0x85, 0x9a, 0x6f, 0xba, 0x55, 0x11, 0x82, 0xf3, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x79, 0x34, 0xe9, 0xf5, 0x03, 0x00, 0x00,
}
